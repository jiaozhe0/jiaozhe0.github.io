import{_ as l,c as e,o as i,d as r}from"./app.4b2b1220.js";const _=JSON.parse('{"title":"Chrome 浏览器","description":"","frontmatter":{},"headers":[{"level":2,"title":"一个页面，4 个进程","slug":"一个页面-4-个进程","link":"#一个页面-4-个进程","children":[]},{"level":2,"title":"浏览器进程","slug":"浏览器进程","link":"#浏览器进程","children":[]},{"level":2,"title":"GPU 进程","slug":"gpu-进程","link":"#gpu-进程","children":[]},{"level":2,"title":"网络进程 Network Process","slug":"网络进程-network-process","link":"#网络进程-network-process","children":[]},{"level":2,"title":"渲染进程 Render Process","slug":"渲染进程-render-process","link":"#渲染进程-render-process","children":[]}],"relativePath":"v8/chrome.md"}'),a={name:"v8/chrome.md"},s=r('<h1 id="chrome-浏览器" tabindex="-1">Chrome 浏览器 <a class="header-anchor" href="#chrome-浏览器" aria-hidden="true">#</a></h1><blockquote><h3 id="进程-与-线程" tabindex="-1">进程 与 线程 <a class="header-anchor" href="#进程-与-线程" aria-hidden="true">#</a></h3><p>进程：进程是<strong>操作系统</strong>进行<strong>资源分配</strong>和<strong>调度</strong>的基本单位</p><ul><li>一个进程就是一个程序的运行实例</li><li>一个程序至少一个进程，一个进程至少一个线程（主线程）</li><li>启动一个程序时，操作系统会为该程序创建一块<strong>内存</strong>，用来存放代码，运行的数据和一个执行任务的主线程，</li></ul></blockquote><blockquote><p>线程: 线程是操作系统进行<strong>运算</strong>的最小单位</p><ul><li>线程不能单独存在，他由进程来启动和管理，线程依附于进程 进程与线程之间的 4 个特点：</li><li>进程中的任意一个线程执行出错，都会导致整个进程的崩溃</li><li>线程之间共享进程中的数据</li><li>当一个进程关闭之后，操作系统会回收进程所占用的内存</li><li>进程之间相互隔离</li></ul></blockquote><h2 id="一个页面-4-个进程" tabindex="-1">一个页面，4 个进程 <a class="header-anchor" href="#一个页面-4-个进程" aria-hidden="true">#</a></h2><p>打开一个页面至少需要 1 个网络进程，1 个浏览器进程，1 个 GPU 进程以及 1 个渲染进程；如果打开页面运行插件，还需要一个插件进程</p><ul><li>浏览器进程</li><li>GPU 进程</li><li>网络进程</li><li>渲染进程</li><li>插件进程</li></ul><h2 id="浏览器进程" tabindex="-1">浏览器进程 <a class="header-anchor" href="#浏览器进程" aria-hidden="true">#</a></h2><ol><li>负责浏览器界面的展示，用户交互（如前进，后退，地址栏）</li><li>子进程管理：负责各个页面的管理，销毁和创建</li><li>存储功能</li><li>网络资源的管理，下载等</li></ol><h4 id="包含的线程" tabindex="-1">包含的线程 <a class="header-anchor" href="#包含的线程" aria-hidden="true">#</a></h4><ul><li>UI 线程：用于绘制浏览器的按钮和输入字段</li><li>网络线程:用于处理网络请求，以及从服务器接受数据</li><li>存储线程：用于控制对文件的访问</li></ul><h2 id="gpu-进程" tabindex="-1">GPU 进程 <a class="header-anchor" href="#gpu-进程" aria-hidden="true">#</a></h2><p>处理来自其他进程的 GPU 任务，比如来自渲染进程或扩展程序进程的 CSS3 动画效果，来自浏览器进程的界面绘制 利用 GPU 硬件来加速渲染，包括 Canvas 绘制，css3 转换，css3 变换，webGL：具体原理就是如果 DOM 元素使用了这些属性，GPU</p><h2 id="网络进程-network-process" tabindex="-1">网络进程 Network Process <a class="header-anchor" href="#网络进程-network-process" aria-hidden="true">#</a></h2><ul><li>负责网页的网络资源加载</li><li>网络进程面向<strong>渲染进程</strong>和<strong>浏览器进程</strong>提供网络下载功能</li><li></li></ul><h2 id="渲染进程-render-process" tabindex="-1">渲染进程 Render Process <a class="header-anchor" href="#渲染进程-render-process" aria-hidden="true">#</a></h2><p>核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程</p><h4 id="包含的线程-1" tabindex="-1">包含的线程 <a class="header-anchor" href="#包含的线程-1" aria-hidden="true">#</a></h4><ul><li><p><strong>JS 引擎线程</strong>(主线程)</p><ul><li>V8 引擎</li><li>负责解析 js 脚本，运行代码</li><li></li></ul></li><li><p>GUI 渲染线程：</p><ul><li>负责渲染浏览器界面，解析 html,css，构建 DOM 和 CSSOM 树</li><li><strong>GUI 线程和 JS 引擎线程互斥！</strong></li></ul></li><li><p>事件触发线程</p><ul><li>事件触发线程归属于浏览器，不属于 JS 引擎，</li><li>负责接收事件，并将回调函数放入 js 引擎线程的事件队列中</li></ul></li><li><p>定时器触发线程</p><ul><li>setTimeout 和 serInterval 所在线程</li><li>当 js 执行到这些任务时，js 引擎会将这些转交给定时器线程，等事件触发时，作为宏任务加到消息队列</li></ul></li><li><p>异步 http 请求线程</p><ul><li>XMLHttpRequest 在连接后是通过浏览器新开的一个线程请求</li><li>检测 XMLHttpRequest 请求，当请求状态改变时，将设置的回调函数（宏任务）添加到消息队列中等待执行</li></ul></li><li><p>IO 线程</p></li><li><p>合成线程</p></li></ul>',18),t=[s];function n(o,h,d,c,p,u){return i(),e("div",null,t)}const k=l(a,[["render",n]]);export{_ as __pageData,k as default};
